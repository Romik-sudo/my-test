{"ast":null,"code":"import { interval } from 'rxjs';\nimport { increase, decrease, reset } from '../counter.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"../renderer/renderer.component\";\nimport * as i3 from \"@angular/common\";\nexport class StoreComponent {\n  constructor(store) {\n    this.store = store;\n    this.countIncr$ = store.select('countIncr');\n    this.countDecr$ = store.select('counterDecr');\n  }\n\n  increase() {\n    this.store.dispatch(increase());\n  }\n\n  decrease() {\n    this.store.dispatch(decrease());\n  }\n\n  reset() {\n    this.store.dispatch(reset());\n  }\n\n  change() {\n    console.log('Do nothing in reducer');\n  }\n\n  start() {\n    const source = interval(1000);\n    this.subscription = source.subscribe(val => this.opensnack(text));\n  }\n\n  stop() {}\n\n}\n\nStoreComponent.ɵfac = function StoreComponent_Factory(t) {\n  return new (t || StoreComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\n\nStoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: StoreComponent,\n  selectors: [[\"app-store\"]],\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"click\"], [3, \"_input\"]],\n  template: function StoreComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function StoreComponent_Template_button_click_0_listener() {\n        return ctx.start;\n      });\n      i0.ɵɵtext(1, \"Start\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"app-renderer\", 1);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelement(4, \"app-renderer\", 1);\n      i0.ɵɵpipe(5, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"_input\", i0.ɵɵpipeBind1(3, 2, ctx.countIncr$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"_input\", i0.ɵɵpipeBind1(5, 4, ctx.countDecr$));\n    }\n  },\n  directives: [i2.RendererComponent],\n  pipes: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzdG9yZS5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"sources":["/home/alex/projects/angular/my-app/src/app/store/store.component.ts","/home/alex/projects/angular/my-app/src/app/store/store.component.html"],"names":[],"mappings":"AAEA,SAAQ,QAAR,QAAiD,MAAjD;AACA,SAAgB,QAAhB,EAA0B,QAA1B,EAAoC,KAApC,QAAgD,oBAAhD;;;;;AAOA,OAAM,MAAO,cAAP,CAAqB;AAMzB,EAAA,WAAA,CAAoB,KAApB,EAA4E;AAAxD,SAAA,KAAA,GAAA,KAAA;AAClB,SAAK,UAAL,GAAkB,KAAK,CAAC,MAAN,CAAa,WAAb,CAAlB;AACA,SAAK,UAAL,GAAkB,KAAK,CAAC,MAAN,CAAa,aAAb,CAAlB;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,SAAK,KAAL,CAAW,QAAX,CAAoB,QAAQ,EAA5B;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,SAAK,KAAL,CAAW,QAAX,CAAoB,QAAQ,EAA5B;AACD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,EAAzB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,IAAA,OAAO,CAAC,GAAR,CAAY,uBAAZ;AACD;;AAED,EAAA,KAAK,GAAA;AACH,UAAM,MAAM,GAAG,QAAQ,CAAC,IAAD,CAAvB;AACA,SAAK,YAAL,GAAoB,MAAM,CAAC,SAAP,CAAiB,GAAG,IAAI,KAAK,SAAL,CAAe,IAAf,CAAxB,CAApB;AACD;;AAED,EAAA,IAAI,GAAA,CAEH;;AAlCwB;;;mBAAd,c,EAAc,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,KAAA,C;AAAA,C;;;QAAd,c;AAAc,EAAA,SAAA,EAAA,CAAA,CAAA,WAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,QAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,uBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACV3B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA;AAAQ,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,+CAAA,GAAA;AAAA,eAAA,GAAA,CAAA,KAAA;AAAA,OAAA;AAAgB,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,OAAA;AAAK,MAAA,EAAA,CAAA,YAAA;AAE7B,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA;;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA;;;;;AADc,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,EAAA,CAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,EAAA,CAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,UAAA,CAAA","sourcesContent":["import {Component} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {interval, Subscription, Observable} from 'rxjs';\nimport {change, increase, decrease, reset} from '../counter.actions';\n\n@Component({\n  selector: 'app-store',\n  templateUrl: './store.component.html',\n  styleUrls: ['./store.component.scss']\n})\nexport class StoreComponent {\n\n  subscription: Subscription;\n  countIncr$: Observable<number>\n  countDecr$: Observable<number>\n\n  constructor(private store: Store<{ countIncr: number, counterDecr: number }>) {\n    this.countIncr$ = store.select('countIncr');\n    this.countDecr$ = store.select('counterDecr');\n  }\n\n  increase() {\n    this.store.dispatch(increase());\n  }\n\n  decrease() {\n    this.store.dispatch(decrease());\n  }\n\n  reset() {\n    this.store.dispatch(reset());\n  }\n\n  change() {\n    console.log('Do nothing in reducer')\n  }\n\n  start() {\n    const source = interval(1000);\n    this.subscription = source.subscribe(val => this.opensnack(text));\n  }\n\n  stop() {\n\n  }\n\n}\n","<button (click)=\"start\">Start</button>\n\n<app-renderer [_input]=\"countIncr$ | async\"></app-renderer>\n<app-renderer [_input]=\"countDecr$ | async\"></app-renderer>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}