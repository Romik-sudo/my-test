{"ast":null,"code":"import _asyncToGenerator from \"/home/alex/projects/angular/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [AppComponent]\n    }).compileComponents();\n  }));\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n  it(`should have as title 'my-app'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('my-app');\n  });\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges(); // const compiled = fixture.nativeElement as HTMLElement;\n    // expect(compiled.querySelector('.content span')?.textContent).toContain('my-app app is running!');\n  });\n  it('should has buttons', function () {\n    var _a, _b, _c;\n\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement;\n    expect((_a = compiled.querySelector('#start_btn')) === null || _a === void 0 ? void 0 : _a.textContent).toContain('Start');\n    expect((_b = compiled.querySelector('#stop_btn')) === null || _b === void 0 ? void 0 : _b.textContent).toContain('Stop');\n    expect((_c = compiled.querySelector('#restart_btn')) === null || _c === void 0 ? void 0 : _c.textContent).toContain('Reset');\n  });\n  it('should start', function () {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector('#start_btn')).on.toContain('Start');\n  });\n});","map":{"version":3,"sources":["/home/alex/projects/angular/my-app/src/app/app.component.spec.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,uBAAxB;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,YAAT,QAA6B,iBAA7B;AAEA,QAAQ,CAAC,cAAD,EAAiB,MAAK;AAC5B,EAAA,UAAU,iCAAC,aAAW;AACpB,UAAM,OAAO,CAAC,sBAAR,CAA+B;AACnC,MAAA,OAAO,EAAE,CACP,mBADO,CAD0B;AAInC,MAAA,YAAY,EAAE,CACZ,YADY;AAJqB,KAA/B,EAOH,iBAPG,EAAN;AAQD,GATS,EAAV;AAWA,EAAA,EAAE,CAAC,uBAAD,EAA0B,MAAK;AAC/B,UAAM,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,YAAxB,CAAhB;AACA,UAAM,GAAG,GAAG,OAAO,CAAC,iBAApB;AACA,IAAA,MAAM,CAAC,GAAD,CAAN,CAAY,UAAZ;AACD,GAJC,CAAF;AAMA,EAAA,EAAE,CAAC,+BAAD,EAAkC,MAAK;AACvC,UAAM,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,YAAxB,CAAhB;AACA,UAAM,GAAG,GAAG,OAAO,CAAC,iBAApB;AACA,IAAA,MAAM,CAAC,GAAG,CAAC,KAAL,CAAN,CAAkB,OAAlB,CAA0B,QAA1B;AACD,GAJC,CAAF;AAMA,EAAA,EAAE,CAAC,qBAAD,EAAwB,MAAK;AAC7B,UAAM,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,YAAxB,CAAhB;AACA,IAAA,OAAO,CAAC,aAAR,GAF6B,CAG7B;AACA;AACD,GALC,CAAF;AAMA,EAAA,EAAE,CAAC,oBAAD,EAAuB,YAAA;;;AACvB,UAAM,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,YAAxB,CAAhB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,UAAM,QAAQ,GAAG,OAAO,CAAC,aAAzB;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAAA,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,KAAA,CAApC,GAAoC,EAAA,CAAE,WAAvC,CAAN,CAA0D,SAA1D,CAAoE,OAApE;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,WAAvB,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,WAAtC,CAAN,CAAyD,SAAzD,CAAmE,MAAnE;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,cAAvB,CAAA,MAAsC,IAAtC,IAAsC,EAAA,KAAA,KAAA,CAAtC,GAAsC,KAAA,CAAtC,GAAsC,EAAA,CAAE,WAAzC,CAAN,CAA4D,SAA5D,CAAsE,OAAtE;AACD,GAPC,CAAF;AASA,EAAA,EAAE,CAAC,cAAD,EAAiB,YAAA;AACjB,UAAM,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,YAAxB,CAAhB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,UAAM,QAAQ,GAAG,OAAO,CAAC,aAAzB;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAAD,CAAN,CAA6C,EAA7C,CAAgD,SAAhD,CAA0D,OAA1D;AACD,GALC,CAAF;AAMD,CA7CO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        RouterTestingModule\n      ],\n      declarations: [\n        AppComponent\n      ],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have as title 'my-app'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('my-app');\n  });\n\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    // const compiled = fixture.nativeElement as HTMLElement;\n    // expect(compiled.querySelector('.content span')?.textContent).toContain('my-app app is running!');\n  });\n  it('should has buttons', function () {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('#start_btn')?.textContent).toContain('Start');\n    expect(compiled.querySelector('#stop_btn')?.textContent).toContain('Stop');\n    expect(compiled.querySelector('#restart_btn')?.textContent).toContain('Reset');\n  });\n\n  it('should start', function () {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('#start_btn')).on.toContain('Start');\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}