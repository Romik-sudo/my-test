{"ast":null,"code":"import _asyncToGenerator from \"/home/alex/projects/angular/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { StoreComponent } from './store.component';\nimport { StoreModule } from \"@ngrx/store\";\ndescribe('StoreComponent', () => {\n  let component;\n  let fixture;\n  let compiled;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [StoreComponent],\n      imports: [StoreModule.forRoot({})]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(StoreComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    compiled = fixture.nativeElement;\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should has buttons', function () {\n    var _a, _b, _c;\n\n    fixture.detectChanges();\n    expect((_a = compiled.querySelector('#start_btn')) === null || _a === void 0 ? void 0 : _a.textContent).toContain('Start');\n    expect((_b = compiled.querySelector('#stop_btn')) === null || _b === void 0 ? void 0 : _b.textContent).toContain('Stop');\n    expect((_c = compiled.querySelector('#restart_btn')) === null || _c === void 0 ? void 0 : _c.textContent).toContain('Reset');\n  });\n  it('should start', function () {\n    const startBtn = compiled.querySelector('#start_btn');\n    expect(startBtn.trigger('click'));\n  });\n});","map":{"version":3,"sources":["/home/alex/projects/angular/my-app/src/app/store/store.component.spec.ts"],"names":[],"mappings":";AAAA,SAA2B,OAA3B,QAA0C,uBAA1C;AAEA,SAAS,cAAT,QAA+B,mBAA/B;AACA,SAAS,WAAT,QAA4B,aAA5B;AAGA,QAAQ,CAAC,gBAAD,EAAmB,MAAK;AAC9B,MAAI,SAAJ;AACA,MAAI,OAAJ;AACA,MAAI,QAAJ;AAEA,EAAA,UAAU,iCAAC,aAAW;AACpB,UAAM,OAAO,CAAC,sBAAR,CAA+B;AACnC,MAAA,YAAY,EAAE,CAAE,cAAF,CADqB;AAEnC,MAAA,OAAO,EAAE,CAAC,WAAW,CAAC,OAAZ,CAAoB,EAApB,CAAD;AAF0B,KAA/B,EAIL,iBAJK,EAAN;AAKD,GANS,EAAV;AAQA,EAAA,UAAU,CAAC,MAAK;AACd,IAAA,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,cAAxB,CAAV;AACA,IAAA,SAAS,GAAG,OAAO,CAAC,iBAApB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,QAAQ,GAAG,OAAO,CAAC,aAAnB;AACD,GALS,CAAV;AAOA,EAAA,EAAE,CAAC,eAAD,EAAkB,MAAK;AACvB,IAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,UAAlB;AACD,GAFC,CAAF;AAIA,EAAA,EAAE,CAAC,oBAAD,EAAuB,YAAA;;;AACvB,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAAA,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,KAAA,CAApC,GAAoC,EAAA,CAAE,WAAvC,CAAN,CAA0D,SAA1D,CAAoE,OAApE;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,WAAvB,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,WAAtC,CAAN,CAAyD,SAAzD,CAAmE,MAAnE;AACA,IAAA,MAAM,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,aAAT,CAAuB,cAAvB,CAAA,MAAsC,IAAtC,IAAsC,EAAA,KAAA,KAAA,CAAtC,GAAsC,KAAA,CAAtC,GAAsC,EAAA,CAAE,WAAzC,CAAN,CAA4D,SAA5D,CAAsE,OAAtE;AACD,GALC,CAAF;AAOA,EAAA,EAAE,CAAC,cAAD,EAAiB,YAAA;AACjB,UAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAAjB;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,OAAT,CAAiB,OAAjB,CAAD,CAAN;AACD,GAHC,CAAF;AAID,CAnCO,CAAR","sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { StoreComponent } from './store.component';\nimport { StoreModule } from \"@ngrx/store\";\nimport {AppComponent} from \"../app.component\";\n\ndescribe('StoreComponent', () => {\n  let component: StoreComponent;\n  let fixture: ComponentFixture<StoreComponent>;\n  let compiled: HTMLElement;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ StoreComponent ],\n      imports: [StoreModule.forRoot({})]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(StoreComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    compiled = fixture.nativeElement as HTMLElement;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should has buttons', function () {\n    fixture.detectChanges();\n    expect(compiled.querySelector('#start_btn')?.textContent).toContain('Start');\n    expect(compiled.querySelector('#stop_btn')?.textContent).toContain('Stop');\n    expect(compiled.querySelector('#restart_btn')?.textContent).toContain('Reset');\n  });\n\n  it('should start', function () {\n    const startBtn = compiled.querySelector('#start_btn');\n    expect(startBtn.trigger('click'))\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}